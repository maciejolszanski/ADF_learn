{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "codes_raw",
						"type": "DatasetReference"
					},
					"name": "codes"
				},
				{
					"dataset": {
						"referenceName": "delays_raw",
						"type": "DatasetReference"
					},
					"name": "delays"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outputTable_csv_DATAFLOW",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          City as string,",
				"          State as string,",
				"          Country as string,",
				"          IATA as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('hash', 1)) ~> codes",
				"source(output(",
				"          date as integer,",
				"          delay as integer,",
				"          distance as integer,",
				"          origin as string,",
				"          destination as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('hash', 1)) ~> delays",
				"codes, delays join(IATA == origin,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(State),",
				"     avgDelays = avg(delay)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}